// テスト方針とルール
// Last updated: 2024-01-11

// テストツール構成
// --------------
- bun test: 基本的なユニットテストとロジックテスト
- vitest: DOM操作やモック機能が必要な複雑なテスト

// ファイル命名規則
// --------------
- bun用テスト: `*.test.ts`
- vitest用テスト: `*.vitest.ts`

// 1. コンポーネントテスト (Components Tests)
// ----------------------------------------
- vitestを使用（DOM操作が必要なため）
- テストファイルの配置: src/components/**/*.vitest.tsx
- happy-domの設定が必要
- テスト要件:
  - レンダリングの正常性確認
  - ユーザーインタラクションのテスト
  - プロップスの変更に対する動作確認
  - エラー状態のハンドリング
  - アクセシビリティ要件の確認

// 2. ロジックテスト (Logic Tests)
// -----------------------------
- bunを使用
- テストファイルの配置: src/repositories/**/*.test.ts
- テスト要件:
  - 各アクションの正常系・異常系テスト
  - データベース操作の整合性確認
  - エラーハンドリングの確認
  - 境界値テスト
- タイムゾーン依存のテストには process.env.TZ = 'Asia/Tokyo' を設定

// 3. API テスト (API Tests)
// -----------------------
- bunを使用
- テストファイルの配置: src/app/api/**/*.test.ts
- テスト要件:
  - エンドポイントの動作確認
  - リクエスト・レスポンスの形式確認
  - 認証・認可のテスト
  - エラーレスポンスの確認

// 4. ユーティリティテスト (Utility Tests)
// -----------------------------------
- bunを使用
- テストファイルの配置: src/utils/**/*.test.ts
- テスト要件:
  - 関数の入出力テスト
  - エッジケースの確認
  - パフォーマンステスト（必要な場合）

// 5. 統合テスト (Integration Tests)
// ------------------------------
- 複雑なモックが必要な場合はvitest、それ以外はbunを使用
- テストファイルの配置:
  - bun: src/tests/integration/**/*.test.ts
  - vitest: src/tests/integration/**/*.vitest.ts
- テスト要件:
  - 複数のコンポーネント間の連携確認
  - データフローの確認
  - E2Eシナリオのテスト

// テスト実装ルール
// --------------
1. テストカバレッジ目標: 80%以上
2. テストケース命名規則: "should {期待される動作} when {条件}"
3. テストの独立性を保つ
4. グローバルインポートを使用しない（各ファイルで明示的にインポート）
5. モック関数の使用:
   - bun: import { mock } from 'bun:test'
   - vitest: import { vi } from 'vitest'
6. テストデータは専用のフィクスチャーとして管理

// CI/CD統合
// --------
1. プルリクエスト時にbunとvitestの両方のテストを並列実行
2. テストカバレッジレポートの生成
3. テスト失敗時はマージをブロック

// メンテナンス
// ----------
1. 3ヶ月ごとのテストケース見直し
2. 非推奨テストの削除・更新
3. テストパフォーマンスの定期的な確認
4. bunの新機能・アップデートの定期的なチェック
