// テスト方針とルール
// Last updated: 2024-01-11

// チェックリストの運用ルール
// ----------------------
1. テストの実装前にチェックリストを更新してはいけない
2. テストの実行が成功し、以下の条件を満たした後にのみチェックを入れる：
   - テストが正常に実行完了
   - カバレッジが目標値を達成
   - エラーケースが適切に処理されている
   - テストコードがレビュー基準を満たしている
3. チェックリストの更新は、テスト実行の結果を確認した後に行う
4. 一度チェックを入れた項目でも、テストが失敗するようになった場合は、チェックを外す

// テストツール構成
// --------------
- bun test: 基本的なユニットテストとロジックテスト
- vitest: DOM操作やモック機能が必要な複雑なテスト

// ファイル命名規則
// --------------
- bun用テスト: `*.test.ts`
- vitest用テスト: `*.vitest.ts`

// 1. コンポーネントテスト (Components Tests)
// ----------------------------------------
- vitestを使用（DOM操作が必要なため）
- テストファイルの配置: src/components/**/*.vitest.tsx
- happy-domの設定が必要
- テスト要件:
  - レンダリングの正常性確認
  - ユーザーインタラクションのテスト
  - プロップスの変更に対する動作確認
  - エラー状態のハンドリング
  - アクセシビリティ要件の確認

// 2. ロジックテスト (Logic Tests)
// -----------------------------
- bunを使用
- テストファイルの配置: src/repositories/**/*.test.ts
- テスト要件:
  - 各アクションの正常系・異常系テスト
  - データベース操作の整合性確認
  - エラーハンドリングの確認
  - 境界値テスト
- タイムゾーン依存のテストには process.env.TZ = 'Asia/Tokyo' を設定

// 3. API テスト (API Tests)
// -----------------------
- bunを使用
- テストファイルの配置: src/app/api/**/*.test.ts
- テスト要件:
  - エンドポイントの動作確認
  - リクエスト・レスポンスの形式確認
  - 認証・認可のテスト
  - エラーレスポンスの確認

// 4. ユーティリティテスト (Utility Tests)
// -----------------------------------
- bunを使用
- テストファイルの配置: src/utils/**/*.test.ts
- テスト要件:
  - 関数の入出力テスト
  - エッジケースの確認
  - パフォーマンステスト（必要な場合）

// 5. 統合テスト (Integration Tests)
// ------------------------------
- 複雑なモックが必要な場合はvitest、それ以外はbunを使用
- テストファイルの配置:
  - bun: src/tests/integration/**/*.test.ts
  - vitest: src/tests/integration/**/*.vitest.ts
- テスト要件:
  - 複数のコンポーネント間の連携確認
  - データフローの確認
  - E2Eシナリオのテスト

// テスト実装ルール
// --------------
1. テストカバレッジ目標: 80%以上
2. テストケース命名規則: "should {期待される動作} when {条件}"
3. テストの独立性を保つ
4. グローバルインポートを使用しない（各ファイルで明示的にインポート）
5. モック関数の使用:
   - bun: import { mock } from 'bun:test'
   - vitest: import { vi } from 'vitest'
6. テストデータは専用のフィクスチャーとして管理

// CI/CD統合
// --------
1. プルリクエスト時にbunとvitestの両方のテストを並列実行
2. テストカバレッジレポートの生成
3. テスト失敗時はマージをブロック

// メンテナンス
// ----------
1. 3ヶ月ごとのテストケース見直し
2. 非推奨テストの削除・更新
3. テストパフォーマンスの定期的な確認
4. bunの新機能・アップデートの定期的なチェック

# テストチェックリスト作成のルール

1. 実装を必ず確認してからテスト項目を作成する
   - 実装されていない機能のテスト項目は追加しない
   - 実装を確認せずに想像で項目を追加しない

2. 外部ライブラリのコンポーネントはテスト対象外
   - 例：Clerkの`UserButton`など
   - ライブラリ側でテスト済みの機能は重複してテストしない

3. コンポーネントの階層構造を意識する
   - 子コンポーネントのテストは親コンポーネントで重複させない
   - 例：`Header`の`Logo`コンポーネントは`Logo`のテストで十分

4. テスト項目は具体的に記述する
   - 何をテストするのか明確にする
   - 抽象的な項目は避ける

5. テスト項目は実装の変更に応じて更新する
   - 定期的に実装との整合性を確認する
   - 不要になった項目は削除する

6. チェックリストの重複を避ける
   - 同じコンポーネントのテスト項目が複数箇所に記載されないようにする
   - 定期的にチェックリスト全体をレビューし、重複を排除する

7. 外部ライブラリの機能のテスト範囲を明確にする
   - ライブラリのコア機能はテスト対象外
   - ライブラリをラップする独自の機能のみテスト対象とする
   - テスト対象とする範囲をチーム内で合意する

8. チェックリストはテスト駆動で作成する
   - チェックリストの作成手順：
     1. テストファイル（*.vitest.tsx）を作成
     2. テストを実装
     3. テストを実行して成功を確認
     4. テスト結果に基づいてチェックリストに項目を追加
   - 誤った手順を発見した場合：
     1. 現在のチェックリストを破棄
     2. テスト実装から始めて再作成
   - チェックリストに記載する項目：
     - 実際にテストした内容のみ
     - テストで確認できた機能のみ
     - テストの結果に基づいて決定された項目のみ
